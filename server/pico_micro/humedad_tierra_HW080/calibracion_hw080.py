"""
Sistema de calibraci√≥n autom√°tica para sensor HW-080
Permite calibrar el sensor paso a paso con validaci√≥n
"""

from machine import Pin, ADC
import time
import json


class HW080Calibrator:
    """
    Clase para calibraci√≥n autom√°tica del sensor HW-080
    """

    def __init__(self, adc_pin=26, digital_pin=16):
        """
        Inicializa el calibrador del sensor

        Args:
            adc_pin (int): Pin ADC
            digital_pin (int): Pin digital
        """
        try:
            self.adc = ADC(Pin(adc_pin))
            self.digital_pin = Pin(digital_pin, Pin.IN)
            self.calibration_data = {}

            print("Calibrador HW-080 inicializado")
            print("IMPORTANTE: Sigue las instrucciones exactamente")

        except Exception as e:
            print(f"Error inicializando calibrador: {e}")
            raise

    def take_stable_readings(self, condition_name, samples=15, stabilization_time=3):
        """
        Toma lecturas estables para una condici√≥n espec√≠fica

        Args:
            condition_name (str): Nombre de la condici√≥n
            samples (int): N√∫mero de muestras
            stabilization_time (int): Tiempo de estabilizaci√≥n

        Returns:
            dict: Estad√≠sticas de las lecturas
        """
        print(f"\n--- CALIBRANDO: {condition_name.upper()} ---")
        print(f"Tiempo de estabilizaci√≥n: {stabilization_time} segundos")

        # Tiempo de estabilizaci√≥n
        for i in range(stabilization_time, 0, -1):
            print(f"Estabilizando... {i}s", end="\r")
            time.sleep(1)

        print(f"\nTomando {samples} lecturas...")

        readings = []
        digital_states = []

        for i in range(samples):
            # Lectura anal√≥gica
            raw_value = self.adc.read_u16()
            readings.append(raw_value)

            # Lectura digital
            digital_state = not self.digital_pin.value()
            digital_states.append(digital_state)

            print(
                f"Lectura {i+1:2d}: {raw_value:5d} | Digital: {'H' if digital_state else 'S'}"
            )
            time.sleep(0.3)

        # Calcular estad√≠sticas
        if readings:
            avg = sum(readings) / len(readings)
            min_val = min(readings)
            max_val = max(readings)
            deviation = max_val - min_val
            digital_humid_count = sum(digital_states)

            stats = {
                "condition": condition_name,
                "average": avg,
                "minimum": min_val,
                "maximum": max_val,
                "deviation": deviation,
                "samples": len(readings),
                "digital_humid_ratio": digital_humid_count / len(digital_states),
                "raw_readings": readings,
                "digital_readings": digital_states,
            }

            print(f"\nEstad√≠sticas para {condition_name}:")
            print(f"Promedio: {avg:.1f}")
            print(f"Rango: {min_val} - {max_val}")
            print(f"Desviaci√≥n: {deviation}")
            print(
                f"Digital h√∫medo: {digital_humid_count}/{len(digital_states)} lecturas"
            )

            return stats

        return None

    def validate_readings(self, dry_stats, wet_stats):
        """
        Valida que las lecturas de calibraci√≥n sean correctas

        Args:
            dry_stats (dict): Estad√≠sticas del estado seco
            wet_stats (dict): Estad√≠sticas del estado h√∫medo

        Returns:
            tuple: (es_v√°lido, mensaje)
        """
        print("\n--- VALIDANDO CALIBRACI√ìN ---")

        # Verificar que hay diferencia significativa
        difference = dry_stats["average"] - wet_stats["average"]
        min_difference = 5000  # Diferencia m√≠nima esperada

        if difference < min_difference:
            return (
                False,
                f"Diferencia insuficiente ({difference:.0f}). M√≠nimo: {min_difference}",
            )

        # Verificar que seco > h√∫medo (l√≥gica del sensor capacitivo)
        if dry_stats["average"] <= wet_stats["average"]:
            return False, "Valores invertidos: seco debe ser mayor que h√∫medo"

        # Verificar estabilidad (desviaci√≥n no muy alta)
        max_deviation = 3000
        if dry_stats["deviation"] > max_deviation:
            return False, f"Lecturas secas inestables (desv: {dry_stats['deviation']})"

        if wet_stats["deviation"] > max_deviation:
            return (
                False,
                f"Lecturas h√∫medas inestables (desv: {wet_stats['deviation']})",
            )

        # Verificar estado digital
        if wet_stats["digital_humid_ratio"] < 0.7:
            print(
                f"ADVERTENCIA: Estado digital h√∫medo solo {wet_stats['digital_humid_ratio']*100:.0f}% del tiempo"
            )
            print("Puede necesitar ajustar el potenci√≥metro del m√≥dulo")

        print("‚úì Calibraci√≥n V√ÅLIDA")
        print(f"‚úì Diferencia: {difference:.0f} puntos")
        print(f"‚úì Rango √∫til: {wet_stats['average']:.0f} - {dry_stats['average']:.0f}")

        return True, "Calibraci√≥n exitosa"

    def run_full_calibration(self):
        """
        Ejecuta el proceso completo de calibraci√≥n

        Returns:
            dict: Datos de calibraci√≥n finales
        """
        print("\n" + "=" * 60)
        print("CALIBRACI√ìN AUTOM√ÅTICA SENSOR HW-080")
        print("=" * 60)
        print("\nSigue las instrucciones cuidadosamente...")

        # FASE 1: Calibraci√≥n en SECO
        print("\nüåµ FASE 1: CALIBRACI√ìN EN SECO")
        print("Instrucciones:")
        print("1. Retira el sensor de cualquier superficie")
        print("2. D√©jalo en el aire libre")
        print("3. NO toques las placas met√°licas")

        input("\nPresiona ENTER cuando el sensor est√© en el aire...")

        dry_stats = self.take_stable_readings("SECO", samples=15)

        if not dry_stats:
            print("‚ùå Error en calibraci√≥n seca")
            return None

        # FASE 2: Calibraci√≥n en H√öMEDO
        print("\nüíß FASE 2: CALIBRACI√ìN EN H√öMEDO")
        print("Instrucciones:")
        print("1. Prepara tierra h√∫meda (no barro)")
        print("2. Inserta el sensor COMPLETAMENTE")
        print("3. Aseg√∫rate que las placas toquen la tierra")
        print("4. La tierra debe estar h√∫meda, no encharcada")

        input("\nPresiona ENTER cuando el sensor est√© en tierra h√∫meda...")

        wet_stats = self.take_stable_readings("H√öMEDO", samples=15)

        if not wet_stats:
            print("‚ùå Error en calibraci√≥n h√∫meda")
            return None

        # VALIDACI√ìN
        is_valid, message = self.validate_readings(dry_stats, wet_stats)

        if not is_valid:
            print(f"\n‚ùå CALIBRACI√ìN INV√ÅLIDA: {message}")
            print("Repite el proceso de calibraci√≥n")
            return None

        # GUARDAR CALIBRACI√ìN
        calibration = {
            "dry_value": int(dry_stats["average"]),
            "wet_value": int(wet_stats["average"]),
            "timestamp": time.time(),
            "validation_passed": True,
            "dry_stats": dry_stats,
            "wet_stats": wet_stats,
        }

        self.calibration_data = calibration

        print(f"\n‚úÖ CALIBRACI√ìN COMPLETADA")
        print(f"Valor SECO: {calibration['dry_value']}")
        print(f"Valor H√öMEDO: {calibration['wet_value']}")
        print(
            f"Rango de trabajo: {calibration['wet_value']} - {calibration['dry_value']}"
        )

        return calibration

    def save_calibration_to_file(self, filename="hw080_calibration.json"):
        """
        Guarda la calibraci√≥n en un archivo JSON

        Args:
            filename (str): Nombre del archivo
        """
        if not self.calibration_data:
            print("No hay datos de calibraci√≥n para guardar")
            return False

        try:
            # Crear versi√≥n simplificada para guardar
            save_data = {
                "dry_value": self.calibration_data["dry_value"],
                "wet_value": self.calibration_data["wet_value"],
                "timestamp": self.calibration_data["timestamp"],
                "validation_passed": self.calibration_data["validation_passed"],
            }

            with open(filename, "w") as f:
                json.dump(save_data, f)

            print(f"‚úÖ Calibraci√≥n guardada en {filename}")
            return True

        except Exception as e:
            print(f"‚ùå Error guardando calibraci√≥n: {e}")
            return False

    def test_calibration(self, duration_seconds=30):
        """
        Prueba la calibraci√≥n obtenida

        Args:
            duration_seconds (int): Duraci√≥n del test
        """
        if not self.calibration_data:
            print("No hay calibraci√≥n para probar")
            return

        print(f"\n--- PROBANDO CALIBRACI√ìN ---")
        print(f"Duraci√≥n: {duration_seconds} segundos")
        print("Tiempo\t\tValor\tHumedad%\tDigital")
        print("-" * 50)

        start_time = time.time()

        try:
            while (time.time() - start_time) < duration_seconds:
                # Leer valor
                raw_value = self.adc.read_u16()
                digital_state = not self.digital_pin.value()

                # Calcular porcentaje usando calibraci√≥n
                dry_val = self.calibration_data["dry_value"]
                wet_val = self.calibration_data["wet_value"]

                humidity = ((dry_val - raw_value) / (dry_val - wet_val)) * 100
                humidity = max(0, min(100, humidity))

                elapsed = time.time() - start_time
                digital_text = "H√öMEDO" if digital_state else "SECO"

                print(
                    f"{elapsed:6.1f}s\t\t{raw_value}\t{humidity:5.1f}%\t\t{digital_text}"
                )

                time.sleep(2)

        except KeyboardInterrupt:
            print("\nTest detenido por usuario")


def main():
    """
    Funci√≥n principal para ejecutar calibraci√≥n
    """
    try:
        calibrator = HW080Calibrator()

        # Ejecutar calibraci√≥n completa
        result = calibrator.run_full_calibration()

        if result:
            # Guardar calibraci√≥n
            calibrator.save_calibration_to_file()

            # Probar calibraci√≥n
            print("\n¬øQuieres probar la calibraci√≥n? (s/n): ", end="")
            if input().lower().startswith("s"):
                print("\nMueve el sensor entre seco y h√∫medo para ver los cambios...")
                calibrator.test_calibration(duration_seconds=60)

            print("\nüéâ Proceso completado exitosamente!")
            print("Puedes usar estos valores en tu c√≥digo principal:")
            print(f"dry_value = {result['dry_value']}")
            print(f"wet_value = {result['wet_value']}")
        else:
            print("\n‚ùå Calibraci√≥n fallida. Revisa las conexiones y repite.")

    except Exception as e:
        print(f"Error en calibraci√≥n: {e}")


if __name__ == "__main__":
    main()
