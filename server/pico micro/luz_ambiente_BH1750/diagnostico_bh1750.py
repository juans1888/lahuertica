"""
üîß C√≥digo de diagn√≥stico para sensor BH1750 (GY-30)
Verifica funcionamiento, conectividad I2C y detecta problemas comunes
"""

from machine import Pin, I2C
import utime
import gc


class BH1750Diagnostics:
    """
    Clase para diagn√≥stico completo del sensor BH1750 (GY-30)
    """

    def __init__(self, sda_pin=0, scl_pin=1, i2c_freq=100000):
        """
        Inicializa el diagn√≥stico del BH1750

        Args:
            sda_pin (int): Pin SDA del I2C (por defecto 0)
            scl_pin (int): Pin SCL del I2C (por defecto 1)
            i2c_freq (int): Frecuencia I2C (por defecto 100000)
        """
        try:
            self.sda_pin = sda_pin
            self.scl_pin = scl_pin
            self.i2c_freq = i2c_freq

            # Constantes del BH1750
            self.BH1750_ADDR = 0x23
            self.BH1750_CMD_POWER_ON = 0x01
            self.BH1750_CMD_RESET = 0x07
            self.BH1750_CMD_CONTINUOUS_HIGH_RES = 0x10

            # Inicializar I2C
            self.i2c = I2C(0, sda=Pin(sda_pin), scl=Pin(scl_pin), freq=i2c_freq)

            print(f"üí° Sensor BH1750 (GY-30) inicializado")
            print(f"üîå I2C: SDA=GPIO{sda_pin}, SCL=GPIO{scl_pin}, Freq={i2c_freq}Hz")
            print(f"üìç Direcci√≥n: 0x{self.BH1750_ADDR:02X}")
            print("‚ö†Ô∏è  IMPORTANTE: Verificar conexiones VCC, GND, SDA, SCL")

        except Exception as e:
            print(f"‚ùå Error inicializando diagn√≥stico BH1750: {e}")
            raise

    def scan_i2c_bus(self):
        """
        Escanea el bus I2C para detectar dispositivos conectados

        Returns:
            list: Lista de direcciones I2C encontradas
        """
        try:
            print("\nüîç ESCANEANDO BUS I2C...")
            devices = self.i2c.scan()

            print(f"üì° Dispositivos encontrados: {len(devices)}")

            if devices:
                for addr in devices:
                    device_name = (
                        "BH1750 (GY-30)" if addr == self.BH1750_ADDR else "Desconocido"
                    )
                    print(f"   üìç 0x{addr:02X} - {device_name}")
            else:
                print("‚ùå No se encontraron dispositivos en el bus I2C")

            return devices

        except Exception as e:
            print(f"‚ùå Error escaneando I2C: {e}")
            return []

    def check_sensor_presence(self):
        """
        Verifica si el sensor BH1750 est√° presente en el bus I2C

        Returns:
            bool: True si el sensor est√° presente
        """
        try:
            devices = self.scan_i2c_bus()

            if self.BH1750_ADDR in devices:
                print(f"‚úÖ BH1750 detectado en direcci√≥n 0x{self.BH1750_ADDR:02X}")
                return True
            else:
                print(f"‚ùå BH1750 NO detectado en direcci√≥n 0x{self.BH1750_ADDR:02X}")
                print("üîß Verificar:")
                print("   ‚Ä¢ Conexiones VCC (3.3V), GND")
                print("   ‚Ä¢ Conexiones SDA y SCL")
                print("   ‚Ä¢ Pin ADDR (flotante = 0x23, GND = 0x23, VCC = 0x5C)")
                return False

        except Exception as e:
            print(f"‚ùå Error verificando presencia: {e}")
            return False

    def initialize_sensor(self):
        """
        Inicializa el sensor BH1750 con comandos b√°sicos

        Returns:
            bool: True si la inicializaci√≥n fue exitosa
        """
        try:
            print("\nüîß INICIALIZANDO SENSOR...")

            # Verificar presencia primero
            if not self.check_sensor_presence():
                return False

            # Encender el sensor
            print("   üì° Enviando comando POWER_ON...")
            self.i2c.writeto(self.BH1750_ADDR, bytes([self.BH1750_CMD_POWER_ON]))
            utime.sleep_ms(10)

            # Resetear el sensor
            print("   üîÑ Enviando comando RESET...")
            self.i2c.writeto(self.BH1750_ADDR, bytes([self.BH1750_CMD_RESET]))
            utime.sleep_ms(10)

            # Configurar modo continuo de alta resoluci√≥n
            print("   ‚öôÔ∏è Configurando modo alta resoluci√≥n...")
            self.i2c.writeto(
                self.BH1750_ADDR, bytes([self.BH1750_CMD_CONTINUOUS_HIGH_RES])
            )
            utime.sleep_ms(180)  # Esperar primera medici√≥n

            print("‚úÖ Sensor inicializado correctamente")
            return True

        except OSError as e:
            print(f"‚ùå Error de comunicaci√≥n I2C: {e}")
            print("üîß Verificar conexiones f√≠sicas")
            return False
        except Exception as e:
            print(f"‚ùå Error inicializando sensor: {e}")
            return False

    def single_reading(self):
        """
        Realiza una lectura individual del sensor

        Returns:
            dict: Resultado de la lectura con estado
        """
        try:
            gc.collect()  # Limpiar memoria

            # Leer 2 bytes del sensor
            data = self.i2c.readfrom(self.BH1750_ADDR, 2)

            # Convertir a valor en lux
            raw_value = (data[0] << 8) | data[1]
            lux_value = raw_value / 1.2

            return {
                "success": True,
                "lux": lux_value,
                "raw_value": raw_value,
                "data_bytes": data,
                "error": None,
                "timestamp": utime.time(),
            }

        except OSError as e:
            return {
                "success": False,
                "lux": None,
                "raw_value": None,
                "data_bytes": None,
                "error": f"Error comunicaci√≥n I2C: {e}",
                "timestamp": utime.time(),
            }
        except Exception as e:
            return {
                "success": False,
                "lux": None,
                "raw_value": None,
                "data_bytes": None,
                "error": f"Error general: {e}",
                "timestamp": utime.time(),
            }

    def test_basic_functionality(self):
        """
        Prueba b√°sica de funcionamiento del sensor
        """
        print("\nüß™ PRUEBA B√ÅSICA DE FUNCIONAMIENTO")
        print("-" * 45)

        # Inicializar sensor
        if not self.initialize_sensor():
            print("‚ùå No se pudo inicializar el sensor")
            return False

        # Intentar 5 lecturas b√°sicas
        successful_readings = 0
        failed_readings = 0
        lux_values = []

        print("\nRealizando 5 lecturas de prueba...")
        print("Lectura\t\tLux\t\tRaw\t\tEstado")
        print("-" * 50)

        for i in range(5):
            result = self.single_reading()

            if result["success"]:
                lux = result["lux"]
                raw = result["raw_value"]
                print(f"{i+1}\t\t{lux:6.1f}\t\t{raw}\t\t‚úÖ")
                successful_readings += 1
                lux_values.append(lux)
            else:
                print(f"{i+1}\t\t---\t\t---\t\t‚ùå {result['error'][:20]}...")
                failed_readings += 1

            utime.sleep(1)  # Esperar entre lecturas

        # Resultado de la prueba
        success_rate = (successful_readings / 5) * 100

        print(f"\nüìä RESULTADO:")
        print(f"‚úÖ Lecturas exitosas: {successful_readings}/5 ({success_rate:.0f}%)")
        print(f"‚ùå Lecturas fallidas: {failed_readings}/5")

        if lux_values:
            avg_lux = sum(lux_values) / len(lux_values)
            min_lux = min(lux_values)
            max_lux = max(lux_values)
            print(f"üí° Promedio: {avg_lux:.1f} lux")
            print(f"üí° Rango: {min_lux:.1f} - {max_lux:.1f} lux")

        if success_rate >= 80:
            print("üéâ Sensor funcionando CORRECTAMENTE")
            return True
        elif success_rate >= 60:
            print("‚ö†Ô∏è  Sensor funcionando con PROBLEMAS menores")
            return True
        else:
            print("üö´ Sensor con PROBLEMAS graves")
            return False

    def light_response_test(self):
        """
        Prueba de respuesta a cambios de luz
        """
        print("\nüí° PRUEBA DE RESPUESTA A CAMBIOS DE LUZ")
        print("-" * 50)
        print("Esta prueba verifica que el sensor responda a cambios de iluminaci√≥n")
        print("\nüìã INSTRUCCIONES:")
        print("1. Deja el sensor en condiciones normales de luz")
        print("2. Cuando se indique, cubre el sensor con la mano")
        print("3. Luego dest√°palo y ponlo bajo luz brillante")

        input("\nPresiona ENTER para comenzar...")

        if not self.initialize_sensor():
            return False

        # Lectura base
        print("\nüìä Tomando lectura base (luz normal)...")
        base_result = self.single_reading()

        if not base_result["success"]:
            print(f"‚ùå Error en lectura base: {base_result['error']}")
            return False

        base_lux = base_result["lux"]
        print(f"üí° Luz base: {base_lux:.1f} lux")

        # Prueba con sensor cubierto
        input("\nüëã CUBRE el sensor con la mano y presiona ENTER...")

        utime.sleep(1)  # Estabilizar
        dark_result = self.single_reading()

        if dark_result["success"]:
            dark_lux = dark_result["lux"]
            print(f"üåë Luz cubierta: {dark_lux:.1f} lux")

            # Verificar reducci√≥n significativa
            reduction = ((base_lux - dark_lux) / base_lux) * 100 if base_lux > 0 else 0

            if reduction > 50:
                print(f"‚úÖ Buena respuesta a oscuridad (-{reduction:.0f}%)")
            elif reduction > 20:
                print(f"‚ö†Ô∏è  Respuesta moderada a oscuridad (-{reduction:.0f}%)")
            else:
                print(f"‚ùå Poca respuesta a oscuridad (-{reduction:.0f}%)")
        else:
            print(f"‚ùå Error en lectura oscura: {dark_result['error']}")

        # Prueba con luz brillante
        input(
            "\nüí° DESTAPA el sensor y ponlo bajo LUZ BRILLANTE, luego presiona ENTER..."
        )

        utime.sleep(1)  # Estabilizar
        bright_result = self.single_reading()

        if bright_result["success"]:
            bright_lux = bright_result["lux"]
            print(f"‚òÄÔ∏è Luz brillante: {bright_lux:.1f} lux")

            # Verificar aumento significativo
            if bright_lux > base_lux:
                increase = ((bright_lux - base_lux) / base_lux) * 100
                print(f"‚úÖ Buena respuesta a luz brillante (+{increase:.0f}%)")
            else:
                print(f"‚ö†Ô∏è  No se detect√≥ aumento de luz")
        else:
            print(f"‚ùå Error en lectura brillante: {bright_result['error']}")

        print(f"\nüéØ EVALUACI√ìN DE RESPUESTA:")
        if (
            dark_result["success"]
            and bright_result["success"]
            and dark_lux < base_lux < bright_lux
        ):
            print("‚úÖ Sensor responde correctamente a cambios de luz")
            return True
        else:
            print("‚ùå Sensor no responde adecuadamente a cambios de luz")
            return False

    def stability_test(self, duration_minutes=2):
        """
        Prueba de estabilidad durante un per√≠odo

        Args:
            duration_minutes (int): Duraci√≥n de la prueba en minutos
        """
        print(f"\n‚è±Ô∏è  PRUEBA DE ESTABILIDAD - {duration_minutes} minutos")
        print("-" * 50)
        print("Mant√©n condiciones de luz constantes durante la prueba")
        print("\nTiempo\t\tLux\t\tRaw\t\tEstado")
        print("-" * 50)

        if not self.initialize_sensor():
            return False

        start_time = utime.time()
        end_time = start_time + (duration_minutes * 60)

        readings = []
        error_count = 0

        try:
            while utime.time() < end_time:
                elapsed = (utime.time() - start_time) / 60

                result = self.single_reading()

                if result["success"]:
                    lux = result["lux"]
                    raw = result["raw_value"]

                    print(f"{elapsed:5.1f}m\t\t{lux:6.1f}\t\t{raw}\t\t‚úÖ")

                    readings.append({"time": elapsed, "lux": lux, "raw": raw})
                else:
                    print(
                        f"{elapsed:5.1f}m\t\t---\t\t---\t\t‚ùå {result['error'][:15]}..."
                    )
                    error_count += 1

                utime.sleep(5)  # Lectura cada 5 segundos

        except KeyboardInterrupt:
            print("\n‚èπÔ∏è  Prueba detenida por usuario")

        # An√°lisis de estabilidad
        self.analyze_stability(readings, error_count)

    def analyze_stability(self, readings, error_count):
        """
        Analiza la estabilidad de las lecturas

        Args:
            readings (list): Lista de lecturas v√°lidas
            error_count (int): N√∫mero de errores
        """
        if not readings:
            print("\n‚ùå No hay lecturas v√°lidas para analizar")
            return

        # Extraer datos
        lux_values = [r["lux"] for r in readings]
        raw_values = [r["raw"] for r in readings]

        # Estad√≠sticas
        lux_avg = sum(lux_values) / len(lux_values)
        lux_min = min(lux_values)
        lux_max = max(lux_values)
        lux_range = lux_max - lux_min

        raw_avg = sum(raw_values) / len(raw_values)
        raw_min = min(raw_values)
        raw_max = max(raw_values)
        raw_range = raw_max - raw_min

        # Calcular coeficiente de variaci√≥n
        if lux_avg > 0:
            lux_variance = sum([(l - lux_avg) ** 2 for l in lux_values]) / len(
                lux_values
            )
            lux_std = lux_variance**0.5
            lux_cv = (lux_std / lux_avg) * 100
        else:
            lux_cv = 0

        print(f"\nüìà AN√ÅLISIS DE ESTABILIDAD:")
        print(f"üìä Lecturas v√°lidas: {len(readings)}")
        print(f"‚ùå Errores: {error_count}")

        print(f"\nüí° INTENSIDAD LUMINOSA:")
        print(f"   Promedio: {lux_avg:.1f} lux")
        print(f"   Rango: {lux_min:.1f} - {lux_max:.1f} lux")
        print(f"   Variaci√≥n: {lux_range:.1f} lux")
        print(f"   Coef. variaci√≥n: {lux_cv:.1f}%")

        print(f"\nüìä VALORES RAW:")
        print(f"   Promedio: {raw_avg:.0f}")
        print(f"   Rango: {raw_min} - {raw_max}")
        print(f"   Variaci√≥n: {raw_range}")

        # Evaluaci√≥n de estabilidad
        if lux_cv < 5:
            stability_rating = "EXCELENTE"
        elif lux_cv < 10:
            stability_rating = "BUENA"
        elif lux_cv < 20:
            stability_rating = "REGULAR"
        else:
            stability_rating = "POBRE"

        print(f"\nüéØ ESTABILIDAD: {stability_rating}")

        # Evaluaci√≥n general
        total_readings = len(readings) + error_count
        success_rate = (
            (len(readings) / total_readings) * 100 if total_readings > 0 else 0
        )

        print(f"üéØ Tasa de √©xito: {success_rate:.1f}%")

        if success_rate >= 90 and lux_cv < 10:
            print("üü¢ SENSOR EXCELENTE - Listo para uso")
        elif success_rate >= 75 and lux_cv < 20:
            print("üü° SENSOR BUENO - Aceptable para uso")
        else:
            print("üî¥ SENSOR PROBLEM√ÅTICO - Revisar conexiones")

    def check_light_ranges(self):
        """
        Verifica rangos t√≠picos de luz en diferentes condiciones
        """
        print("\nüåç VERIFICACI√ìN DE RANGOS DE LUZ")
        print("-" * 40)

        if not self.initialize_sensor():
            return False

        result = self.single_reading()

        if not result["success"]:
            print(f"‚ùå No se pudo verificar: {result['error']}")
            return False

        lux = result["lux"]

        print(f"üí° Lectura actual: {lux:.1f} lux")

        # Clasificar tipo de iluminaci√≥n
        if lux < 0.1:
            light_type = "üåë Muy oscuro"
            description = "Noche sin luna"
        elif lux < 1:
            light_type = "üåô Oscuro"
            description = "Noche con luna llena"
        elif lux < 10:
            light_type = "üè† Muy tenue"
            description = "Habitaci√≥n con velas"
        elif lux < 50:
            light_type = "üí° Tenue"
            description = "Habitaci√≥n con luz artificial tenue"
        elif lux < 200:
            light_type = "üè¢ Interior normal"
            description = "Oficina o habitaci√≥n iluminada"
        elif lux < 500:
            light_type = "üè¢ Interior brillante"
            description = "Oficina muy iluminada"
        elif lux < 1000:
            light_type = "üå§Ô∏è Exterior nublado"
            description = "D√≠a nublado"
        elif lux < 10000:
            light_type = "‚òÄÔ∏è Exterior soleado"
            description = "D√≠a soleado t√≠pico"
        elif lux < 50000:
            light_type = "‚òÄÔ∏è Muy brillante"
            description = "D√≠a muy soleado"
        else:
            light_type = "üîÜ Extremadamente brillante"
            description = "Sol directo o luz artificial muy intensa"

        print(f"üè∑Ô∏è  Tipo: {light_type}")
        print(f"üìù Descripci√≥n: {description}")

        # Verificar si est√° en rango del sensor
        if 0.1 <= lux <= 65535:
            print("‚úÖ Dentro del rango √≥ptimo del sensor")
        elif lux < 0.1:
            print("‚ö†Ô∏è  Por debajo del rango m√≠nimo (pero normal en oscuridad)")
        else:
            print("‚ö†Ô∏è  Cerca del l√≠mite m√°ximo del sensor")

        return True

    def connection_troubleshooting(self):
        """
        Gu√≠a de soluci√≥n de problemas de conexi√≥n
        """
        print("\nüîß SOLUCI√ìN DE PROBLEMAS DE CONEXI√ìN")
        print("-" * 50)

        print("üìã VERIFICACIONES PASO A PASO:")

        print("\n1. üîå Conexiones f√≠sicas:")
        print("   ‚úì VCC ‚Üí 3.3V del Raspberry Pi")
        print("   ‚úì GND ‚Üí GND del Raspberry Pi")
        print("   ‚úì SDA ‚Üí GPIO0 (pin 1)")
        print("   ‚úì SCL ‚Üí GPIO1 (pin 2)")
        print("   ‚úì ADDR ‚Üí Sin conectar (o a GND para dir 0x23)")

        print("\n2. üîç Escaneo I2C:")
        devices = self.scan_i2c_bus()

        if not devices:
            print("\n‚ùå PROBLEMA: No se detectan dispositivos I2C")
            print("üîß Soluciones:")
            print("   ‚Ä¢ Verificar todas las conexiones")
            print("   ‚Ä¢ Comprobar que VCC est√© a 3.3V")
            print("   ‚Ä¢ Verificar continuidad de cables")
            print("   ‚Ä¢ Probar con cables m√°s cortos")

        elif self.BH1750_ADDR not in devices:
            print(f"\n‚ùå PROBLEMA: BH1750 no en direcci√≥n 0x{self.BH1750_ADDR:02X}")
            print("üîß Soluciones:")
            print("   ‚Ä¢ Verificar pin ADDR del m√≥dulo")
            print("   ‚Ä¢ Probar direcci√≥n 0x5C (ADDR a VCC)")
            print("   ‚Ä¢ Verificar integridad del m√≥dulo")

        else:
            print("\n‚úÖ Dispositivo I2C detectado correctamente")

        print("\n3. ‚ö° Alimentaci√≥n:")
        print("   ‚Ä¢ Verificar que VCC = 3.3V (NO 5V)")
        print("   ‚Ä¢ Comprobar consumo de corriente normal")
        print("   ‚Ä¢ Verificar que GND est√© bien conectado")

        print("\n4. üì° Comunicaci√≥n:")
        if devices and self.BH1750_ADDR in devices:
            print("   ‚úÖ Comunicaci√≥n I2C establecida")

            # Probar inicializaci√≥n
            try:
                self.initialize_sensor()
                print("   ‚úÖ Inicializaci√≥n exitosa")
            except:
                print("   ‚ùå Error en inicializaci√≥n")
                print("   üîß Verificar integridad del sensor")
        else:
            print("   ‚ùå Sin comunicaci√≥n I2C")


def diagnostic_menu():
    """
    Men√∫ interactivo para diagn√≥stico del BH1750
    """
    print("\n" + "=" * 60)
    print("üí° DIAGN√ìSTICO SENSOR BH1750 (GY-30)")
    print("=" * 60)

    # Configuraci√≥n de pines
    try:
        sda_input = input("Pin SDA (por defecto 0): ").strip()
        sda_pin = int(sda_input) if sda_input else 0

        scl_input = input("Pin SCL (por defecto 1): ").strip()
        scl_pin = int(scl_input) if scl_input else 1
    except ValueError:
        sda_pin, scl_pin = 0, 1
        print(f"Usando pines por defecto: SDA={sda_pin}, SCL={scl_pin}")

    try:
        sensor = BH1750Diagnostics(sda_pin=sda_pin, scl_pin=scl_pin)

        while True:
            print("\n" + "-" * 45)
            print("üí° OPCIONES DE DIAGN√ìSTICO:")
            print("-" * 45)
            print("1. üîç Escanear bus I2C")
            print("2. üß™ Prueba b√°sica de funcionamiento")
            print("3. üí° Prueba de respuesta a luz")
            print("4. ‚è±Ô∏è  Prueba de estabilidad (2 min)")
            print("5. üåç Verificaci√≥n de rangos de luz")
            print("6. üìä Lectura √∫nica")
            print("7. üîÑ Lecturas continuas")
            print("8. üîß Soluci√≥n de problemas")
            print("9. üö™ Salir")

            option = input("\nSelecciona (1-9): ").strip()

            if option == "1":
                sensor.scan_i2c_bus()

            elif option == "2":
                sensor.test_basic_functionality()

            elif option == "3":
                sensor.light_response_test()

            elif option == "4":
                duration = input("Duraci√≥n en minutos (por defecto 2): ").strip()
                duration = int(duration) if duration.isdigit() else 2
                sensor.stability_test(duration)

            elif option == "5":
                sensor.check_light_ranges()

            elif option == "6":
                if sensor.initialize_sensor():
                    result = sensor.single_reading()
                    if result["success"]:
                        print(f"üí° Intensidad: {result['lux']:.1f} lux")
                        print(f"üìä Raw: {result['raw_value']}")
                    else:
                        print(f"‚ùå Error: {result['error']}")

            elif option == "7":
                print("üìä Lecturas continuas cada 2s (Ctrl+C para parar)")
                if sensor.initialize_sensor():
                    try:
                        while True:
                            result = sensor.single_reading()
                            if result["success"]:
                                lux = result["lux"]
                                raw = result["raw_value"]
                                print(f"üí° {lux:8.1f} lux | Raw: {raw:5d}")
                            else:
                                print(f"‚ùå {result['error']}")
                            utime.sleep(2)
                    except KeyboardInterrupt:
                        print("\n‚èπÔ∏è  Lecturas detenidas")

            elif option == "8":
                sensor.connection_troubleshooting()

            elif option == "9":
                print("üëã Saliendo del diagn√≥stico...")
                break

            else:
                print("‚ùå Opci√≥n no v√°lida")

    except Exception as e:
        print(f"‚ùå Error en diagn√≥stico: {e}")
        print("üîß Verificar conexiones y configuraci√≥n")


if __name__ == "__main__":
    diagnostic_menu()
